#
# Main file of program intended to run analysis on protein structural data using
# holographic machine learning techniques
#

# 
# Import statements
#
import os
import pdb_interface as pdb_int
import tensorflow as tf
import protein

from tensorfieldnetworks.utils import FLOAT_TYPE

#
# parameters for the current analysis
#

# l value associated with maximum frequency used in fourier transforms
cutoffL = 1
# frequency to be used to make the holograms
k = 0.0001
# hologram radius
rH = 5.
# noise distance
d = 2.0
# directories of proteins and workoing space
casp7Dir = '/home/mpun/scratch/protein_workspace/casp7'
workDir = casp7Dir + '/workspace'
trainDir = casp7Dir + '/training30'
testDir = casp7Dir + '/validation'




#
# get train and test proteins
#
print('Getting training proteins from ' + trainDir)
trainProteins = pdb_int.get_proteins_from_dir(trainDir)
print(str(len(trainProteins)) + ' training proteins gathered')
print('Gathering testing proteins from ' + testDir)
testProteins = pdb_int.get_proteins_from_dir(testDir)
print(str(len(testProteins)) + ' testing proteins gathered')




#
# get amino acid structures from all training proteins
#
trainExamplesPerAa = 2
print('Getting ' + str(trainExamplesPerAa) + ' training holograms per amino ' +
      'acid from training proteins')
train_hgrams,train_labels = pdb_int.get_amino_acid_shapes_from_protein_list(trainProteins,trainDir,
                                                          trainExamplesPerAa,
                                                          d,rH,k,cutoffL)

#
# get amino acid holograms from all test proteins
#
testExamplesPerAa = 2
print('Getting ' + str(testExamplesPerAa) + ' testing holograms per amino ' +
      'acid from testing proteins')
test_hgrams,test_labels = pdb_int.get_amino_acid_shapes_from_protein_list(testProteins,testDir,
                                                          trainExamplesPerAa,
                                                          d,rH,k,cutoffL)

# PUT THIS IN LATER ONCE NETWORK WORKS

#
# set up the Kondor network
#
def get_linear_weights(dimensions,l_cutoff,layer_num):
        weights_real = {}
            weights_imag = {}
                for i in range(l_cutoff+1):
                            weights_real[i] = tf.get_variable(dtype=FLOAT_TYPE,
                                                                                                     shape=dimensions[i],
                                                                                                     name='w_real_l_'+str(i)+'_layer_'+str(layer_num))
                                    weights_imag[i] = tf.get_variable(dtype=FLOAT_TYPE,
                                                                                                               shape=dimensions[i],
                                                                                                               name='w_imag_l_'+str(i)+'_layer_'+str(layer_num))
                                        return weights_real,weights_imag

                                    def covariant_linearity(input_real_dict,input_imag_dict,weights_real,weights_imag,l_cutoff):
                                            output_real = {}
                                                output_imag = {}
                                                    for l in range(l_cutoff+1):
                                                                curr_input_complex = tf.complex(input_real_dict[l],input_imag_dict[l])
                                                                        curr_weights_complex = tf.complex(weights_real[l],weights_imag[l])
                                                                                print('input shape:' +str(curr_input_complex.shape))
                                                                                        print('weights shape:' +str(curr_weights_complex.shape))
                                                                                                output_complex = tf.einsum('cm,ci->im',curr_input_complex,curr_weights_complex)
                                                                                                        output_real[l] = tf.real(output_complex)
                                                                                                                output_imag[l] = tf.imag(output_complex)
                                                                                                                    return output_real,output_imag


                                                                                                                def nonlinearity_sh_ri(input_real,input_imag,output_dim):
                                                                                                                        output_real = {}
                                                                                                                            output_imag = {}
                                                                                                                                for L in range(l_cutoff+1):
                                                                                                                                            output_real[L] = []
                                                                                                                                                    output_imag[L] = []
                                                                                                                                                        for l1 in range(l_cutoff+1):
                                                                                                                                                                    for l2 in range(l1,l_cutoff+1):
                                                                                                                                                                                    for L in range(l2-l1,np.minimum(l_cutoff,l1+l2)+1):
                                                                                                                                                                                                        input_1_complex = tf.complex(input_real[l1],input_imag[l1])
                                                                                                                                                                                                                        input_2_complex = tf.complex(input_real[l2],input_imag[l2])
                                                                                                                                                                                                                                        prod_complex = tf.einsum('im,Mnm,jn->ijM',input_1_complex,tf_cg_matrices[(L,l2,l1)],input_2_complex)
                                                                                                                                                                                                                                                        prod_complex = tf.reshape(prod_complex,[output_dim*output_dim,2*L+1])
                                                                                                                                                                                                                                                                        prod_real = tf.real(prod_complex)
                                                                                                                                                                                                                                                                                        prod_imag = tf.imag(prod_complex)

                                                                                                                                                                                                                                                                                                        output_real[L].append(prod_real)
                                                                                                                                                                                                                                                                                                                        output_imag[L].append(prod_imag)

                                                                                                                                                                                                                                                                                                                            for L in range(l_cutoff+1):
                                                                                                                                                                                                                                                                                                                                        output_real[L] = tf.concat(output_real[L],axis=0)
                                                                                                                                                                                                                                                                                                                                                output_imag[L] = tf.concat(output_real[L],axis=0)

                                                                                                                                                                                                                                                                                                                                                    return output_real,output_imag

                                                                                                                                                                                                                                                                                                                                                def nonlinearity_sh_ri_all(input_real,input_imag):
                                                                                                                                                                                                                                                                                                                                                        output_real = {}
                                                                                                                                                                                                                                                                                                                                                            output_imag = {}

                                                                                                                                                                                                                                                                                                                                                                for L in range(l_cutoff+1):
                                                                                                                                                                                                                                                                                                                                                                            output_real[L] = []
                                                                                                                                                                                                                                                                                                                                                                                    output_imag[L] = []
                                                                                                                                                                                                                                                                                                                                                                                        for l1 in range(l_cutoff+1):
                                                                                                                                                                                                                                                                                                                                                                                                    for l2 in range(l1,l_cutoff+1):
                                                                                                                                                                                                                                                                                                                                                                                                                    for L in range(l2-l1,np.minimum(l_cutoff,l1+l2)+1):
                                                                                                                                                                                                                                                                                                                                                                                                                                        input_1_complex = tf.complex(input_real[l1],input_imag[l1])
                                                                                                                                                                                                                                                                                                                                                                                                                                                        input_2_complex = tf.complex(input_real[l2],input_imag[l2])
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        prod_complex = tf.einsum('im,Mnm,jn->ijM',input_1_complex,tf_cg_matrices[(L,l2,l1)],input_2_complex)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        dim1 = input_1_complex.shape[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        dim2 = input_2_complex.shape[0]
prod_complex = tf.reshape(prod_complex,[dim1*dim2,2*L+1])
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        prod_real = tf.real(prod_complex)
prod_imag = tf.imag(prod_complex)

output_real[L].append(prod_real)
output_imag[L].append(prod_imag)

for L in range(l_cutoff+1):
output_real[L] = tf.concat(output_real[L],axis=0)
output_imag[L] = tf.concat(output_real[L],axis=0)

return output_real,output_imag

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                def full_layer(input_real_dict,input_imag_dict,output_dim,layer_num):
layer_dimensions = []
for i in range(cutoff_l+1):
layer_dimensions.append(input_real_dict[i].shape[0])
layer_dimensions = [[x,output_dim] for x in layer_dimensions]
weights_real,weights_imag = get_linear_weights(layer_dimensions,cutoff_l,layer_num)
linear_output_real,linear_output_imag = covariant_linearity(input_real_dict,input_imag_dict,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                weights_real,weights_imag,cutoff_l)
nonlinear_output_real,nonlinear_output_imag = nonlinearity_sh_ri_all(linear_output_real,linear_output_imag)
return nonlinear_


print('Terminating successfully')
    

